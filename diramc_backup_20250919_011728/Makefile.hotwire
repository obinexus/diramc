# DIRAM Hotwire Components + Final Library Build
# Builds parser/AST/hotwire objects AND creates libdiram.{a,so}

# Get configuration
include Makefile.config

# Check for libxml2
XML_CFLAGS = $(shell xml2-config --cflags 2>/dev/null || echo "")
XML_LDFLAGS = $(shell xml2-config --libs 2>/dev/null || echo "")

# Hotwire sources
HOTWIRE_SRCS = \
    $(SRC_DIR)/core/parser/tokenizer.c \
    $(SRC_DIR)/core/parser/parser.c \
    $(SRC_DIR)/core/parser/ast.c \
    $(SRC_DIR)/core/hotwire/hotwire.c \
    $(SRC_DIR)/core/hotwire/asm_visitor.c \
    $(SRC_DIR)/core/hotwire/wasm_visitor.c

# Object files
HOTWIRE_OBJS = $(patsubst $(SRC_DIR)/%.c,$(OBJ_DIR)/%.o,$(HOTWIRE_SRCS))

# Get core objects from core build
CORE_OBJS = $(OBJ_DIR)/core/feature-alloc/alloc.o \
            $(OBJ_DIR)/core/feature-alloc/feature_alloc.o \
            $(OBJ_DIR)/core/feature-alloc/async_promise.o \
            $(OBJ_DIR)/core/feature-alloc/cache_lookahead.o \
            $(OBJ_DIR)/core/config/config.o

# Combined objects for final library
ALL_OBJS = $(CORE_OBJS) $(HOTWIRE_OBJS)

# Target libraries - Unix compliant naming
LIBDIRAM_STATIC = $(LIB_DIR)/lib$(DIRAM_LIB_NAME).a
LIBDIRAM_SHARED = $(LIB_DIR)/lib$(DIRAM_LIB_NAME).so

# Compiler flags with XML support
HOTWIRE_CFLAGS = $(CFLAGS) $(XML_CFLAGS) -DDIRAM_HOTWIRE_ENABLED

hotwire: check-xml hotwire-directories create-stubs $(HOTWIRE_OBJS) $(LIBDIRAM_STATIC) $(LIBDIRAM_SHARED)
	@echo "[HOTWIRE] Build complete"

hotwire-directories:
	@mkdir -p $(OBJ_DIR)/core/parser
	@mkdir -p $(OBJ_DIR)/core/hotwire
	@mkdir -p $(LIB_DIR)

create-stubs:
	@mkdir -p $(SRC_DIR)/core/parser
	@mkdir -p $(SRC_DIR)/core/hotwire
	@for src in $(HOTWIRE_SRCS); do \
		if [ ! -f $$src ]; then \
			echo "/* Stub for $$src */" > $$src; \
			echo "#include <stdio.h>" >> $$src; \
			echo "// TODO: Implement" >> $$src; \
		fi \
	done

# Pattern rules for hotwire objects
$(OBJ_DIR)/core/parser/%.o: $(SRC_DIR)/core/parser/%.c
	@echo "[CC HOTWIRE] $<"
	@$(CC) $(HOTWIRE_CFLAGS) $(INCLUDES) -c $< -o $@

$(OBJ_DIR)/core/hotwire/%.o: $(SRC_DIR)/core/hotwire/%.c
	@echo "[CC HOTWIRE] $<"
	@$(CC) $(HOTWIRE_CFLAGS) $(INCLUDES) -c $< -o $@

# Final library builds - Unix compliant libdiram.{a,so}
$(LIBDIRAM_STATIC): $(ALL_OBJS)
	@echo "[AR] Building static library: $@"
	@$(AR) rcs $@ $^

$(LIBDIRAM_SHARED): $(ALL_OBJS)
	@echo "[LD] Building shared library: $@"
	@$(CC) -shared -Wl,-soname,$(SONAME) -o $(LIB_DIR)/$(SONAME) $^ -lpthread -lm $(XML_LDFLAGS)
	@cd $(LIB_DIR) && ln -sf $(SONAME) lib$(DIRAM_LIB_NAME).so

check-xml:
	@command -v xml2-config >/dev/null 2>&1 || \
		(echo "WARNING: libxml2 not found. Hotwire XML features disabled."; true)

clean:
	@echo "[CLEAN] Hotwire components and libraries"
	@rm -f $(HOTWIRE_OBJS) $(LIBDIRAM_STATIC) $(LIBDIRAM_SHARED) $(LIB_DIR)/$(SONAME)

.PHONY: hotwire hotwire-directories create-stubs check-xml clean